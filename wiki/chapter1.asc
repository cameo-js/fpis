= 스칼라로 함수형 프로그래밍 시작하기
김지수 <kjs8469@gmail.com>
v1.0, 2017-01-10
:toc:

== 개요
* 책을 이해하는 수준의 *스칼라 언어*를 배우기
** 함수와 프로그램을 정의하는 법
* 기본적 *함수형 프로그래밍 개념* 익히기
** *재귀*를 이용한 루프
** *고차함수*
** 다형적 함수

== 스칼라 언어
=== 함수와 프로그램을 정의하는 법
[source,scala]
.목록2.1
----
// 이것은 주석
/* 이것도 주석 */
/** 문서화 주석 */
object MyModule {<1>
  def abs(n: Int): Int =<2>
    if (n < 0) -n
    else n

  private def formatAbs(x: Int) = {<3>
    val msg = "The absolute value of %d is %d"
    msg.format(x, abs(x))
  }

  def main(args: Array[String]): Unit =<4>
    println(formatAbs(-42))
}
----
<1> singleton 객체 선언
<2> 정수를 하나 받고 정수를 리턴
<3> Access modifiers
<4> Unit 은 void 과 같은 목적

[TIP]
====
object 키워드

* singleton 객체를 생성
* java의 정적 멤버를 가진 클래스를 사용하는 상황에 사용
* Companion Object를 만들때 사용
====

[TIP]
====
Scala access levels http://www.jesperdj.com/2016/01/08/scala-access-modifiers-and-qualifiers-in-detail/[Access modifiers in Java and Scala]
[cols="6*", options="header"]
|===
|Modifier
|Class
|Companion
|Subclass
|Package
|World

|_no modifier_
|Y
|Y
|Y
|Y
|Y

|`protected`
|Y
|Y
|Y
|N^*^
|N

|`private`
|Y
|Y
|N
|N^*^
|N
|===
^*^: Top-level protected and private members are accessible from inside the package.
====

== 함수형 프로그래밍 개념

=== 재귀를 이용한 루프

=== 고차함수

=== 다형적 함수

== 이해가 필요한
* 2.7 요약에서) 다형적 함수의 가능한 구현들이 상당히 제한되는, 그래서 그냥 "형식을 따라가다" 보면 정확한 구현에 이르는 예도 보았다.
