= 10 모노이드
김지수 <kjs8469@gmail.com>
1.0, 2017-03-15
:toc:

== 10.3 결합법칙과 병렬성

* 결합밥칙을 만족한다는 사실은 목록을 접을때 방향을 선택할 수 있음
* foldLeft, foldRight 를 통해 왼쪽 또는 오른쪽으로 결합 할 수 있음
* 모노이드를 이용하면 *균형 접기(balanced fold)*를 사용
  ** 일부 연산에 더 효율적
  ** 병렬 처리도 가능

.축약 예
----
op(a, op(b, op(c, d))) <1>

op(op(op(a, b), c), d) <2>

op(op(a, b), op(c, d)) <3>
----
<1> 왼쪽으로 접으면
<2> 오른쪽으로 접으면
<3> 균형있게 접으면

* 균형 접기에서는 병렬 처리가 가능
* op의 비용이 인수 크기에 비례하는 경우 트리의 균형이 좋을수록 전체 계산의 효율성이 좋아짐

.평가 추적
----
List("lorem", "ipsum", "dolor", "sit").foldLeft("")(_ + _)
List("ipsum", "dolor", "sit").foldLeft("lorem")(_ + _)
List("dolor", "sit").foldLeft("loremipsum")(_ + _)
List("sit").foldLeft("loremipsumdolor")(_ + _)
List().foldLeft("loremipsumdolorsit")(_ + _)
"loremipsumdolorsit"
----

.계산효율은 어떻게 좋아지나
----
// String 은 불변이라 완전히 새로운 문자 배열을 할당해서 복사
// String a 와 b에 대해 a + b 연산의 시간은 a.length + b.length
// List("lorem", "ipsum", "dolor", "sit") 순서대로 a,b,c,d
op(a, op(b, op(c, d))) // c.length + d.length = 8
op(a, op(b, acc)) // b.length + acc.length = 13
op(a, acc) // a.length + acc.length = 18
// 총 비용 39

op(op(a, b), op(c, d)) // a.length + b.length , c.length + d.length = 10, 8
op(leftAcc, rightAcc) // leftAcc.length + rightAcc.length = 18
// 총 비용 36
----

[source,scala]
.연습문제 10.7
----
def foldMapV[A, B](as: IndexedSeq[A], m: Monoid[B])(f: A => B): B = {
  if (as.length == 0) m.zero
  else if (as.length == 1) f(as(0))
  else {
    val (l,r) = as.splitAt(as.length/2)
    m.op(foldMapV(l, m)(f), foldMapV(r, m)(f))
  }
}
----

[source,scala]
.연습문제 10.8
----
def par[A](m: Monoid[A]): Monoid[Par[A]] = new Monoid[Par[A]]{
  override def op(a1: Par[A], a2: Par[A]): Par[A] = a1.map2(a2)(m.op)
  override def zero: Par[A] = Par.unit(m.zero)
}
----

[source,scala]
.연습문제 10.9
----
def ordered(ints: IndexedSeq[Int]): Boolean = {
  // Our monoid tracks the minimum and maximum element seen so far
  // as well as whether the elements are so far ordered.
  val mon = new Monoid[Option[(Int, Int, Boolean)]] {
    def op(o1: Option[(Int, Int, Boolean)], o2: Option[(Int, Int, Boolean)]) =
      (o1, o2) match {
        // The ranges should not overlap if the sequence is ordered.
        case (Some((x1, y1, p)), Some((x2, y2, q))) =>
          Some((x1 min x2, y1 max y2, p && q && y1 <= x2))
        case (x, None) => x
        case (None, x) => x
      }
    val zero = None
  }
  // The empty sequence is ordered, and each element by itself is ordered.
  foldMapV(ints, mon)(i => Some((i, i, true))).map(_._3).getOrElse(true)
}
----

== 10.4 예제: 병렬 파싱

* String 단어수 세기
* 공백을 찾고
* 공백이 아닌 문자들의 개수 세기
* 메모리에 모두 담을수 없는 거대한 텍스트 파일의 경우
* 여러 조각(chunk)을 병렬로 조사
* "lorem ipsum dolor sit amet, " <= 거대한 파일인양 사용
* *결합법칙*을 만족해야함
* 반을 나눌때 주의
  ** 단어 중간에 나뉘면 "lorem ipsum do"와 "lor sit amet, "로 나뉘어져
  ** dolor 가 두번 계산
* 잘린단어를 처리, 완전한 단어를 기억하는 자료구조가 필요
+
----
sealed trait WC
case class Stub(chars: String) extends WC
case class Part(lStub: String, words: Int, rStub: String) extends WC
----
+
* Stub은 완전한 단어를 보지못한 상태
* Part는 words에 단어개수, lStub은 왼쪽의 부분 단어, rStub은 오른쪽의 부분 단어
* "lorem ipsum do"에 대한 단어 개수 세기 결과 => Part("lorem", 1, "do")
* "lor sit amet, "에 대한 단어 개수 세기 결과 => Part("lor", 2, "")

[source,scala]
.연습문제 10.10
----
val wcMonoid: Monoid[WC] = new Monoid[WC] {
  // The empty result, where we haven't seen any characters yet.
  val zero = Stub("")

  def op(a: WC, b: WC) = (a, b) match {
    case (Stub(c), Stub(d)) => Stub(c + d)
    case (Stub(c), Part(l, w, r)) => Part(c + l, w, r)
    case (Part(l, w, r), Stub(c)) => Part(l, w, r + c)
    case (Part(l1, w1, r1), Part(l2, w2, r2)) =>
      Part(l1, w1 + (if ((r1 + l2).isEmpty) 0 else 1) + w2, r2)
  }
}

//// 모노이드 법칙을 만족
val part1 = Part("part", 1, "ok")
val part2 = Part("", 1, "no")
val part3 = Part("yes", 1, "")
//op(op(x,y),z) == op(x, op(y,z))
assert(wcMonoid.op(part1, wcMonoid.op(part2, part3)) == wcMonoid.op(wcMonoid.op(part1, part2), part3))

//op(x, zero) == x
assert(wcMonoid.op(part1, wcMonoid.zero) == part1)
----


[source,scala]
.연습문제 10.11
----
def count(s: String): Int = {
  // A single character's count. Whitespace does not count,
  // and non-whitespace starts a new Stub.
  def wc(c: Char): WC =
    if (c.isWhitespace)
      Part("", 0, "")
    else
      Stub(c.toString)
  // `unstub(s)` is 0 if `s` is empty, otherwise 1.
  def unstub(s: String) = s.length min 1
  foldMapV(s.toIndexedSeq, wcMonoid)(wc) match {
  // 서명 foldMapV[A, B](as: IndexedSeq[A], m: Monoid[B])(f: A => B): B
    case Stub(s) => unstub(s)
    case Part(l, w, r) => unstub(l) + w + unstub(r)
  }
}
----

.모노이드의 준동형사상(homomorphism)
----
* String 연결 모노이드와 정수 덧셈 모노이드
* 두 문자열의 길이를 더한 결과는 두 문자열을 연결한 문자열의 길이와 같다
* "foo".length + "bar".length == ("foo"+"bar").length
* length는 String을 받고 Int를 돌려주는 함수
* 이 함수가 *모노이드의 구조를 보존*
* 이런 함수를 모노이드 준동형사상(homomorphism)
* 모노이드 M과 N 사이의 모노이드 준동형사상 f는 모든 x, y 값에 대해 다음 일반 법칙을 따른다.
* M.op(f(x), f(y)) == f(N.op(x, y))
* https://proofwiki.org/wiki/Definition:Monoid_Homomorphism[Definition - Monoid Homomorphism]
* 두 모노이드가 하나의 모노이드 동형사상을 만족할 때, 두 모노이드는 동형
* 모노이드 M과 N 사이의 동형사상에는 두 준동형사상 f와 g가 있는데, 여기서 f andThen g와 g andThen f는 모두 항등 함수
* 예로 String 모노이드와 List[Char] 모노이드는 연결(결합) 연산에 의해 동형
* 예로 두 부울 모노이드 (false, ||)와 (true, &&) 도 !(부정) 함수에 의해 동형
----
