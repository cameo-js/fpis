= 3 함수적 자료구조

== 3.4 목록에 대한 재귀와 고차 함수로의 일반화

=== 3.4.1 그 외의 목록 조작 함수들

==== 표준 라이브러리의 List
1 :: 2 :: Nil == 1 :: (2 :: Nil) == List(1,2)

==== 표준 라이브러리의 목록
* def take(n: Int): List[A]
this의 처음 n개의 요소들로 이루어진 목록을 돌려준다.
* def takeWhile(f: A => Boolean): List[A]
주어진 술어 f를 만족하는, this의 가장 긴 선행 요소들로 이루어진 목록을 돌려준다.
* def forall(f: A => Boolean): Boolean
this의 모든 요소가 술어 f를 만족할 때에만 true를 돌려준다.
* def exists(f: A => Boolean): Boolean
this의 요소들 중 하나라도 f를 만족하는 것이 있으면 true를 돌려준다.
* scanLeft와 scanRight
foldLeft 및 foldRight와 비슷하되 최종적으로 누적된 값만 돌려주는 것이 아니라 부분 결과들의 List를 돌려준다.

=== 3.4.2 단순 구성요소들로 목록 함수를 조립할 때의 효율성 손실

==== List의 문제점 (효율성 손)
* 같은 입력을 여러 번 훑는 구현이 만들어질 수 있다.
* 이른 종료를 위해 명시적인 재귀 루프를 작성해야 할 수 있다.

== 3.5 트리

==== 대수적 자료형식(algebraic data type, ADT)
* ex) List, Tree
* 하나 이상의 자료 생성자들로 이루어진 자료 형식
* 0개 이상의 인수를 받을 수 있음
* 자료 형식: 자료 생성자들의 합(sum), 합집합(union)
* 자료 생성자: 인수들의 곱(product)

==== 트리

